name: Tests

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        env:
          NODE_ENV: test
          NODE_OPTIONS: --experimental-vm-modules
          DATABASE_URL: postgres://test:test@localhost:5432/inputly_test
          JWT_SECRET: test-jwt-secret
          ARCJET_KEY: test-arcjet-key
        run: |
          echo "::group::Running Tests"
          if npm test; then
            echo "✅ All tests passed!"
            TEST_SUCCESS=true
          else
            echo "::error::Some tests failed! Check the test output above for details."
            TEST_SUCCESS=false
            exit 1
          fi
          echo "::endgroup::"
        continue-on-error: false
        
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            coverage/
            !coverage/**/*.tmp
          retention-days: 30
          if-no-files-found: warn
          
      - name: Generate coverage summary
        if: always()
        run: |
          echo "## 📊 Test Results" >> $GITHUB_STEP_SUMMARY
          
          # Check if tests passed
          if [[ ${{ job.status }} == "success" ]]; then
            echo "✅ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some tests failed. Check the logs above for details." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add coverage information if available
          if [ -f coverage/coverage-summary.json ]; then
            echo "### 📈 Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Parse coverage data (simplified approach)
            if command -v jq >/dev/null 2>&1; then
              STATEMENTS=$(jq -r '.total.statements.pct' coverage/coverage-summary.json 2>/dev/null || echo "N/A")
              BRANCHES=$(jq -r '.total.branches.pct' coverage/coverage-summary.json 2>/dev/null || echo "N/A")
              FUNCTIONS=$(jq -r '.total.functions.pct' coverage/coverage-summary.json 2>/dev/null || echo "N/A")
              LINES=$(jq -r '.total.lines.pct' coverage/coverage-summary.json 2>/dev/null || echo "N/A")
              
              echo "| Metric | Coverage |" >> $GITHUB_STEP_SUMMARY
              echo "|--------|----------|" >> $GITHUB_STEP_SUMMARY
              echo "| Statements | ${STATEMENTS}% |" >> $GITHUB_STEP_SUMMARY
              echo "| Branches | ${BRANCHES}% |" >> $GITHUB_STEP_SUMMARY
              echo "| Functions | ${FUNCTIONS}% |" >> $GITHUB_STEP_SUMMARY
              echo "| Lines | ${LINES}% |" >> $GITHUB_STEP_SUMMARY
            else
              echo "Coverage summary not available (jq not found)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "Coverage data not found. Make sure Jest is configured to generate coverage reports." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📄 Coverage reports have been uploaded as artifacts and will be retained for 30 days." >> $GITHUB_STEP_SUMMARY
          
      - name: Annotate test failures
        if: failure()
        run: |
          echo "::error::Test suite failed. Please check the test output above for specific failures."
          echo "::notice::Run 'npm test' locally to reproduce and debug test failures"
          echo "::notice::You can also run 'npm test -- --verbose' for more detailed output"